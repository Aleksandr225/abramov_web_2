Flask – это инструмент для создания сайтов (веб-приложений) на Python. Он позволяет легко запустить веб-сервер, настроить страницы, обрабатывать запросы и взаимодействовать с базой данных.

Веб-фреймворк для создания веб-приложений

Преимущества и недостатки:
1. Легко установить и использовать
2. Мы сами выбираем как организовать проект и какие расширения использовать
3. Шаблонизатор удобный инструмент для динамического создания страниц
4. Подходит для небольших проектов

Недостатки:
1. Отстуствие встроенных инструментов
2. Потребуется гораздо больше усилий для организации кода для большого проекта
3. Многие функции требуют дополнительных настроек и библиотек


Как он работает:
Сначала запускат сервер на определенном адрессе и начинает слушать запросы.
После того как кто-то заходит по адресу он с помощью маршрута определяет какие страницы ему показывать.
Также с помощью метода POST и GET мы можем получить какие то данные от пользователя или наоборот показать.

app = Flask(__name__) создает объект приложения.

Потом прописываем маршруты для правильного перехода между страницами.

Flask очень удобен с другими тем что он более прост в обучении гибок и минималистичен по сравнению с другими.






Jinja2 — это шаблонизатор (template engine) для Python, который используется во Flask для создания динамических HTML-страниц.

Шаблоны Jinja2 в наше случаем шаблоном является как раз таки html файл но вообще можно использовать любые текстовые файлы.

Jinja2 позволяет вставлять переменные и упрощать код в HTML-файлах, вместо того чтобы писать каждую страницу вручную.

Мы можем работать без Jinja2 но тогда мы можем возвращать например только текст JSON файл и тд.


# {{}} - используются для вывода данных переданные из Flask приложения в шаблон
# {% %} - используются для управления логикой шаблона (например, циклы, условия и т.д.)

Библиотека faker с помощью нее мы можем создавать случайный текст 









Декоратор — это функция, которая изменяет поведение другой функции без изменения её кода. Это удобный способ добавить новую функциональность к существующим функциям или классам.

Проще говоря, декоратор — это "обёртка" для функции. Он позволяет выполнять дополнительные действия до, после или вместо вызова функции.



